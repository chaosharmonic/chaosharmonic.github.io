{"version":3,"sources":["components/Splash.js","components/About.js","components/Projects.js","components/BuiltWith.js","components/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["profile","process","Splash","size","id","Body","Container","rounded","src","bio","map","paragraph","key","About","backgroundColor","columns","path","title","description","url","project","link","asset","Image","href","Content","createColumn","Projects","Group","multiline","generateCategory","category","technologies","stack","item","reduce","x","y","BuiltWith","library","add","faGithub","faFreeCodeCamp","faCodepen","faLinkedin","faEnvelope","sections","contactInfo","icon","contactIcons","Item","color","constructContactIcon","Navigation","setCurrentView","handleClick","event","target","value","sectionLinks","section","outlined","onClick","constructSectionButton","fixed","Brand","Burger","Segment","align","Menu","App","useState","currentView","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.add4beab.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Hero, Image, Title } from 'rbx'\r\n\r\nconst publicUrl = process.env.PUBLIC_URL\r\nconst profile = `${publicUrl}/assets/profile.jpg`\r\n\r\nconst Splash = () => (\r\n  <>\r\n    <Hero\r\n      size='fullheight-with-navbar'\r\n      id='hero'\r\n    >\r\n      <Hero.Body>\r\n        <Image.Container>\r\n          <Image\r\n            rounded\r\n            id='profile'\r\n            src={profile}\r\n          />\r\n        </Image.Container>\r\n        <Title>Hey there! I'm Sean, and I write code.</Title>\r\n      </Hero.Body>\r\n    </Hero>\r\n  </>\r\n)\r\n\r\nexport default Splash\r\n","import React from 'react'\r\nimport { Section, Content, Title } from 'rbx'\r\n\r\nconst bio = [\r\n  'I\\'m a trained musician, turned one-man IT support desk, turned self-taught JavaScript developer. Since parlaying my tinkering habit into a profession, I\\'ve built up a career on picking up new skillsets to solve the problems in front of me - ranging from streamlining POS deployments across a restaurant chain, to moving my entire workplace off BYOD, to picking apart Express routes in order to fix data flowing into a React app.',\r\n  'In my free time, I\\'m typically working out, gaming, shouting from the Internet rooftops that chat needs a spec, or toying with an experiment or five. Some previous endeavors have included wiring and automating my own RGB lighting, fixing up a DDR pad just so that I could avoid going running, and perrennial attempts to finally nail down a free-standing handstand.'\r\n].map((paragraph, key) => <p key={key}>{paragraph}</p>)\r\n\r\nconst About = () => (\r\n  <Section id='main' backgroundColor='black'>\r\n    <Title>Here's a little about me:</Title>\r\n    <Content>\r\n      {bio}\r\n    </Content>\r\n  </Section>\r\n)\r\n\r\nexport default About\r\n","import React from 'react'\r\nimport { Card, Image, Column, Content, Section, Title } from 'rbx'\r\n\r\nconst baseUrl = 'https://chaosharmonic.github.io'\r\nconst projects = [\r\n  {\r\n    path: 'step-step-recollection',\r\n    title: 'Step Step Recollection',\r\n    description: 'A workout tracker for DDR. (Work in progress.) Built using React, Express, and MongoDB.',\r\n    url: 'https://step-step-recollection.vercel.app/'\r\n  },\r\n  {\r\n    path: 'negotiable',\r\n    title: 'Negotiable',\r\n    description: 'A bar chart for boilerplate salaries. Built using Vue and SVG.'\r\n  },\r\n  {\r\n    path: 't3',\r\n    title: 'Tic Tac Toe',\r\n    description: 'A simple tic tac toe game. Built using vanilla JS.'\r\n  },\r\n  {\r\n    path: 'calc',\r\n    title: 'Calculator',\r\n    description: 'A simple clone of Windows\\' calculator. Built using vanilla JS.'\r\n  }\r\n]\r\n\r\nconst createColumn = (project) => {\r\n  const { title, description, url, path } = project\r\n\r\n  const link = url || `${baseUrl}/${path}`\r\n\r\n  const asset = `../assets/${path}.png`\r\n\r\n  return (\r\n    <Column size={6}>\r\n      <Card>\r\n        <Card.Image>\r\n          <a href={link}>\r\n            <Image src={asset} />\r\n          </a>\r\n        </Card.Image>\r\n        <Card.Content>\r\n          <a href={link}>\r\n            {title}\r\n          </a>\r\n          <p>{description}</p>\r\n        </Card.Content>\r\n      </Card>\r\n    </Column>\r\n  )\r\n}\r\n\r\nconst columns = projects.map(project => createColumn(project))\r\n\r\nconst Projects = () => (\r\n  <Section id='main' backgroundColor='black'>\r\n    <Content>\r\n      <Title id='portfolioHeader'>Here's some work I've done:</Title>\r\n    </Content>\r\n    <Column.Group multiline>\r\n      {columns}\r\n    </Column.Group>\r\n  </Section>\r\n)\r\n\r\nexport default Projects\r\n","import React from 'react'\r\nimport { Section, Content, Title } from 'rbx'\r\n\r\nconst generateCategory = (category, technologies) => ({ category, technologies })\r\n\r\nconst stack = [\r\n  generateCategory('Component Libraries', ['React*', 'Vue']),\r\n  generateCategory('State Management', ['Redux', 'Context']),\r\n  generateCategory('Design Systems', ['Material UI', 'antd', 'RBX*']),\r\n  generateCategory('Grid Systems', ['Bootstrap', 'Bulma*', 'Flexbox']),\r\n  generateCategory('Misc UI libraries', ['Font Awesome', 'Styled Components', 'jQuery']),\r\n  generateCategory('Utility libraries', ['Lodash', 'Moment', 'date-fns']),\r\n  generateCategory('Backend', ['MongoDB', 'Express'])\r\n].map((item, key) => (\r\n  <li key={key}>\r\n    <strong>{item.category}</strong>: {item.technologies.reduce((x, y) => `${x}, ${y}`)}\r\n  </li>\r\n))\r\n\r\nconst BuiltWith = () => (\r\n  <Section id='main' backgroundColor='black'>\r\n    <Title>Technologies used </Title>\r\n    <Content>\r\n      <ul>{stack}</ul>\r\n      <span>* used on this site</span>\r\n    </Content>\r\n    <Title>Attributions</Title>\r\n    <Content>\r\n      <ul>\r\n        <li>Background generated using <a href='https://www.heropatterns.com/'>Hero Patterns</a> (CC BY 4.0)</li>\r\n        <li>Themed using <a href='https://jenil.github.io/bulmaswatch//'>Bulmaswatch</a> (MIT license)</li>\r\n      </ul>\r\n    </Content>\r\n  </Section>\r\n)\r\n\r\nexport default BuiltWith\r\n\r\n// asset credits:\r\n\r\n// background from Hero Patterns*\r\n\r\n// * used on this site\r\n","import React from 'react'\r\nimport { Button, Navbar, Icon } from 'rbx'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { faGithub, faFreeCodeCamp, faCodepen, faLinkedin } from '@fortawesome/free-brands-svg-icons'\r\nimport { faEnvelope } from '@fortawesome/free-solid-svg-icons'\r\n\r\nlibrary.add(faGithub, faFreeCodeCamp, faCodepen, faLinkedin, faEnvelope)\r\nconst sections = ['home', 'about', 'projects', 'built with']\r\n\r\nconst contactInfo = [\r\n  { link: 'https://github.com/chaosharmonic', description: 'Github', icon: faGithub },\r\n  { link: 'https://www.freecodecamp.org/chaosharmonic', description: 'FreeCodeCamp', icon: faFreeCodeCamp },\r\n  { link: 'https://codepen.io/chaosharmonic', description: 'CodePen', icon: faCodepen },\r\n  { link: 'https://www.linkedin.com/in/smmorrissey', description: 'LinkedIn', icon: faLinkedin },\r\n  { link: 'mailto:chaosharmonic@gmail.com', description: 'Email', icon: faEnvelope }\r\n]\r\n\r\nconst constructContactIcon = ({ link, description, icon }) => (\r\n  <Navbar.Item href={link}>\r\n    <Icon\r\n      color='link'\r\n      size='large'\r\n    >\r\n      <FontAwesomeIcon icon={icon} />\r\n    </Icon>\r\n  </Navbar.Item>\r\n)\r\nconst contactIcons = contactInfo.map(link => constructContactIcon(link))\r\n\r\nconst Navigation = ({ setCurrentView }) => {\r\n  const handleClick = (event) => {\r\n    setCurrentView(event.target.value)\r\n  }\r\n\r\n  const constructSectionButton = section => (\r\n    <Button\r\n      color='link'\r\n      outlined\r\n      value={section}\r\n      onClick={handleClick}\r\n    >\r\n      {section}\r\n    </Button>\r\n  )\r\n  const sectionLinks = sections.map(section => constructSectionButton(section))\r\n\r\n  return (\r\n    <Navbar fixed='bottom'>\r\n      <Navbar.Brand>\r\n        {contactIcons}\r\n        <Navbar.Burger />\r\n      </Navbar.Brand>\r\n      <Navbar.Segment align='end'>\r\n        <Navbar.Menu>\r\n          <Button.Group>{sectionLinks}</Button.Group>\r\n        </Navbar.Menu>\r\n      </Navbar.Segment>\r\n    </Navbar>\r\n  )\r\n}\r\n\r\nexport default Navigation\r\n","import React, { useState } from 'react'\r\nimport 'rbx/index.css'\r\nimport 'bulmaswatch/cyborg/bulmaswatch.min.css'\r\nimport './App.css'\r\nimport { Container } from 'rbx'\r\nimport Splash from './components/Splash.js'\r\nimport About from './components/About.js'\r\nimport Projects from './components/Projects'\r\nimport BuiltWith from './components/BuiltWith'\r\nimport Navigation from './components/Navigation.js'\r\n\r\nconst App = () => {\r\n  const [currentView, setCurrentView] = useState('home')\r\n\r\n  return (\r\n    <>\r\n      {currentView === 'home' && <Splash />}\r\n      {currentView !== 'home' && (\r\n        <Container id='App'>\r\n          {currentView === 'about' && <About />}\r\n          {currentView === 'projects' && <Projects />}\r\n          {currentView === 'built with' && <BuiltWith />}\r\n        </Container>\r\n      )}\r\n      <Navigation setCurrentView={setCurrentView} />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}